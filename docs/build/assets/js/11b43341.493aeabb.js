"use strict";(self.webpackChunkcnstra_docs=self.webpackChunkcnstra_docs||[]).push([[256],{7674:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Core","collapsible":true,"collapsed":false,"items":[{"type":"link","href":"/docs/core/api","label":"API","docId":"core/api","unlisted":false},{"type":"link","href":"/docs/core/overview","label":"Overview","docId":"core/core-overview","unlisted":false},{"type":"link","href":"/docs/core/quick-start","label":"Quick Start","docId":"core/quick-start","unlisted":false},{"type":"link","href":"/docs/core/stimulation-options","label":"Stimulation Options","docId":"core/stimulation-options","unlisted":false}]},{"type":"category","label":"Concepts","collapsible":true,"collapsed":false,"items":[{"type":"link","href":"/docs/concepts/ierg","label":"IERG","docId":"concepts/ierg","unlisted":false},{"type":"link","href":"/docs/concepts/intro","label":"Introduction","docId":"concepts/concepts-intro","unlisted":false}]},{"type":"category","label":"Frontend","collapsible":true,"collapsed":false,"items":[{"type":"link","href":"/docs/frontend/oimdb","label":"CNStra & OIMDB","docId":"frontend/oimdb","unlisted":false},{"type":"link","href":"/docs/frontend/react-patterns","label":"React Patterns","docId":"frontend/react-patterns","unlisted":false}]},{"type":"category","label":"Backend","collapsible":true,"collapsed":false,"items":[{"type":"link","href":"/docs/backend/overview","label":"Overview","docId":"backend/backend-overview","unlisted":false}]},{"type":"category","label":"DevTools","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/docs/devtools/download","label":"Download","docId":"devtools/download","unlisted":false},{"type":"link","href":"/docs/devtools/overview","label":"Overview","docId":"devtools/devtools-overview","unlisted":false},{"type":"link","href":"/docs/devtools/integration","label":"Integration","docId":"devtools/devtools-integration","unlisted":false},{"type":"link","href":"/docs/devtools/advanced","label":"Advanced","docId":"devtools/devtools-advanced","unlisted":false}],"href":"/docs/category/devtools"},{"type":"category","label":"Integrations","collapsible":true,"collapsed":false,"items":[{"type":"link","href":"/docs/integrations/aws-sqs","label":"AWS SQS","docId":"integrations/aws-sqs","unlisted":false},{"type":"link","href":"/docs/integrations/bullmq","label":"BullMQ","docId":"integrations/bullmq","unlisted":false},{"type":"link","href":"/docs/integrations/rabbitmq","label":"RabbitMQ","docId":"integrations/rabbitmq","unlisted":false}]},{"type":"category","label":"Advanced","collapsible":true,"collapsed":false,"items":[{"type":"link","href":"/docs/advanced/custom-context-store","label":"Custom Context Store","docId":"advanced/custom-context-store","unlisted":false},{"type":"link","href":"/docs/advanced/performance","label":"Performance","docId":"advanced/performance","unlisted":false}]},{"type":"category","label":"Recipes","collapsible":true,"collapsed":false,"items":[{"type":"link","href":"/docs/recipes/cancel","label":"Cancellation","docId":"recipes/cancel","unlisted":false},{"type":"link","href":"/docs/recipes/error-handling","label":"Error Handling","docId":"recipes/error-handling","unlisted":false},{"type":"link","href":"/docs/recipes/multiple-signals","label":"Multiple Signals","docId":"recipes/multiple-signals","unlisted":false},{"type":"link","href":"/docs/recipes/response-listeners","label":"Response listeners","docId":"recipes/response-listeners","unlisted":false},{"type":"link","href":"/docs/recipes/retry","label":"Retries","docId":"recipes/retry","unlisted":false},{"type":"link","href":"/docs/recipes/saga","label":"Saga","docId":"recipes/saga","unlisted":false},{"type":"link","href":"/docs/recipes/self-loop-cycles","label":"Self-loops","docId":"recipes/self-loop-cycles","unlisted":false}]},{"type":"category","label":"Ecosystem","collapsible":true,"collapsed":false,"items":[{"type":"link","href":"/docs/ecosystem/swift","label":"Swift SDK","docId":"ecosystem/swift-sdk","unlisted":false}]},{"type":"link","href":"/docs/credits","label":"Credits","docId":"credits","unlisted":false}]},"docs":{"advanced/custom-context-store":{"id":"advanced/custom-context-store","title":"Custom Context Store","description":"Implement a custom context store for persistence, distributed systems, or specialized storage backends.","sidebar":"docs"},"advanced/performance":{"id":"advanced/performance","title":"Performance Optimization & Memory Management for State Machines","description":"Optimize CNStra performance and memory usage. Learn zero-dependency design, sync-first execution, memory-efficient patterns, benchmarking, and best practices for high-throughput orchestration.","sidebar":"docs"},"backend/backend-overview":{"id":"backend/backend-overview","title":"Backend Orchestration with CNStra - Sagas, ETL, Queue Systems","description":"Use CNStra for backend orchestration, saga patterns, ETL pipelines, and queue-based workflows. Integrates with BullMQ, RabbitMQ, SQS. Type-safe, deterministic, testable orchestration for Node.js, serverless, and microservices.","sidebar":"docs"},"concepts/concepts-intro":{"id":"concepts/concepts-intro","title":"Introduction to CNStra - Type-Safe Orchestration Library","description":"CNStra is a zero-dependency state machine and orchestration library for JavaScript/TypeScript. Learn about IERG (Inverted Explicit Reactive Graph), deterministic workflows, and SOLID/SRP principles for React and backend applications.","sidebar":"docs"},"concepts/ierg":{"id":"concepts/ierg","title":"IERG - Inverted Explicit Reactive Graph Architecture","description":"Learn about IERG (Inverted Explicit Reactive Graph), CNStra\'s architectural approach. Understand deterministic state machines, explicit flow control, SOLID/SRP principles, and how IERG differs from Flux, Redux, and event-driven architectures.","sidebar":"docs"},"core/api":{"id":"core/api","title":"CNStra API Reference - Neurons, Signals, Collaterals, Context","description":"Complete CNStra API reference. Learn neuron, collateral, signal, dendrite, axon, context, stimulation APIs. Type-safe orchestration primitives for JavaScript/TypeScript state machines.","sidebar":"docs"},"core/core-overview":{"id":"core/core-overview","title":"Core Overview","description":"Graph-routed, type-safe orchestration for reactive apps \u2014 no global event bus.","sidebar":"docs"},"core/quick-start":{"id":"core/quick-start","title":"Quick Start - Install and Use CNStra in 5 Minutes","description":"Get started with CNStra in 5 minutes. Install the zero-dependency state machine library, create your first neuron, and build type-safe orchestration for React, Node.js, or backend systems.","sidebar":"docs"},"core/stimulation-options":{"id":"core/stimulation-options","title":"Stimulation Options","description":"- maxNeuronHops?: number \u2014 limit traversal depth","sidebar":"docs"},"credits":{"id":"credits","title":"Credits","description":"Fonts","sidebar":"docs"},"devtools/devtools-advanced":{"id":"devtools/devtools-advanced","title":"DevTools Advanced Features","description":"Explore advanced capabilities of CNStra DevTools.","sidebar":"docs"},"devtools/devtools-integration":{"id":"devtools/devtools-integration","title":"DevTools Integration","description":"Learn how to integrate CNStra DevTools into your application for debugging and monitoring.","sidebar":"docs"},"devtools/devtools-overview":{"id":"devtools/devtools-overview","title":"DevTools Overview","description":"Powerful debugging and monitoring tools for CNStra applications. Visualize your neural network topology, inspect signal flows, and monitor performance in real-time.","sidebar":"docs"},"devtools/download":{"id":"devtools/download","title":"Download DevTools","description":"Desktop application for debugging and monitoring CNStra applications.","sidebar":"docs"},"ecosystem/swift-sdk":{"id":"ecosystem/swift-sdk","title":"Swift SDK","description":"A Swift implementation of CNStra is available as a separate package. See the repository for details, examples, and API docs.","sidebar":"docs"},"frontend/oimdb":{"id":"frontend/oimdb","title":"React State Management with CNStra & OIMDB - Redux Alternative","description":"Learn how CNStra + OIMDB provides deterministic React state management. A performant alternative to Redux, MobX, Zustand. Type-safe, derived state, reactive updates, SOLID/SRP by design. Perfect for complex React applications.","sidebar":"docs"},"frontend/react-patterns":{"id":"frontend/react-patterns","title":"React Patterns with CNStra","description":"Common patterns to use CNStra from React.","sidebar":"docs"},"integrations/aws-sqs":{"id":"integrations/aws-sqs","title":"AWS SQS Integration","description":"Use SQS to decouple producers from CNStra workers.","sidebar":"docs"},"integrations/bullmq":{"id":"integrations/bullmq","title":"BullMQ Integration","description":"Use BullMQ to schedule work and feed signals into CNStra.","sidebar":"docs"},"integrations/rabbitmq":{"id":"integrations/rabbitmq","title":"RabbitMQ Integration","description":"Use RabbitMQ queues to trigger CNStra runs.","sidebar":"docs"},"recipes/cancel":{"id":"recipes/cancel","title":"Cancellation","description":"Use AbortSignal to cancel in-flight stimulation runs.","sidebar":"docs"},"recipes/error-handling":{"id":"recipes/error-handling","title":"Error Handling & Retry Logic - Best Practices for State Machines","description":"Learn error handling and retry strategies for CNStra state machines. Implement exponential backoff, circuit breakers, error recovery with context, and monitoring for resilient orchestration.","sidebar":"docs"},"recipes/multiple-signals":{"id":"recipes/multiple-signals","title":"Returning Multiple Signals","description":"Sometimes a neuron needs to emit multiple signals in response to a single input. CNStra supports returning arrays of signals from neuron responses.","sidebar":"docs"},"recipes/response-listeners":{"id":"recipes/response-listeners","title":"Response Listeners: Logging, Metrics, and Tracing","description":"Learn how to observe every step of a stimulation using per-run onResponse and global addResponseListener for logging, metrics, and tracing.","sidebar":"docs"},"recipes/retry":{"id":"recipes/retry","title":"Retries","description":"Implement retries by looping within the same neuron, storing attempt count in context, and backing off between tries. This preserves signal ownership and keeps orchestration local.","sidebar":"docs"},"recipes/saga":{"id":"recipes/saga","title":"Saga Pattern Implementation with CNStra - Long-Running Workflows","description":"Implement saga pattern with CNStra for long-running, distributed workflows. Learn short-lived vs long-lived sagas, compensation logic, error handling, and external event triggers for Node.js backends and microservices.","sidebar":"docs"},"recipes/self-loop-cycles":{"id":"recipes/self-loop-cycles","title":"Cycles with Self-loops","description":"Use self-loops to model cycles/iterations inside a single neuron while keeping ownership and state in context.","sidebar":"docs"}}}}')}}]);