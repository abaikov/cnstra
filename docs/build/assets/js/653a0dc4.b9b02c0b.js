"use strict";(self.webpackChunkcnstra_docs=self.webpackChunkcnstra_docs||[]).push([[213],{4551:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"advanced/performance","title":"Performance Optimization & Memory Management for State Machines","description":"Optimize CNStra performance and memory usage. Learn zero-dependency design, sync-first execution, memory-efficient patterns, benchmarking, and best practices for high-throughput orchestration.","source":"@site/advanced/performance.md","sourceDirName":"advanced","slug":"/advanced/performance","permalink":"/docs/advanced/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/abaikov/cnstra/edit/master/docs/advanced/performance.md","tags":[],"version":"current","lastUpdatedAt":1760139021000,"frontMatter":{"id":"performance","title":"Performance Optimization & Memory Management for State Machines","sidebar_label":"Performance","slug":"/advanced/performance","description":"Optimize CNStra performance and memory usage. Learn zero-dependency design, sync-first execution, memory-efficient patterns, benchmarking, and best practices for high-throughput orchestration.","keywords":["performance optimization","memory management","zero dependencies","lightweight library","benchmark","profiling","scalability","high throughput","low latency","memory efficiency","performance best practices","optimization techniques","bundle size","tree shaking","code splitting"]},"sidebar":"docs","previous":{"title":"Custom Context Store","permalink":"/docs/advanced/custom-context-store"},"next":{"title":"Cancellation","permalink":"/docs/recipes/cancel"}}');var t=r(4848),i=r(8453);const o={id:"performance",title:"Performance Optimization & Memory Management for State Machines",sidebar_label:"Performance",slug:"/advanced/performance",description:"Optimize CNStra performance and memory usage. Learn zero-dependency design, sync-first execution, memory-efficient patterns, benchmarking, and best practices for high-throughput orchestration.",keywords:["performance optimization","memory management","zero dependencies","lightweight library","benchmark","profiling","scalability","high throughput","low latency","memory efficiency","performance best practices","optimization techniques","bundle size","tree shaking","code splitting"]},a=void 0,c={},l=[{value:"Memory-efficient design",id:"memory-efficient-design",level:2},{value:"Performance characteristics",id:"performance-characteristics",level:2},{value:"Best practices",id:"best-practices",level:2},{value:"Keep context data minimal",id:"keep-context-data-minimal",level:3},{value:"Use synchronous responses when possible",id:"use-synchronous-responses-when-possible",level:3},{value:"Set reasonable <code>maxNeuronHops</code>",id:"set-reasonable-maxneuronhops",level:3},{value:"Implement proper error handling",id:"implement-proper-error-handling",level:3},{value:"Avoid <code>autoCleanupContexts</code> in production",id:"avoid-autocleanupcontexts-in-production",level:3},{value:"Measuring performance",id:"measuring-performance",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"CNStra is designed to be memory-efficient and fast for reactive orchestration."}),"\n",(0,t.jsx)(n.h2,{id:"memory-efficient-design",children:"Memory-efficient design"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Zero dependencies"}),": No third-party packages, minimal bundle size."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No error storage"}),": Errors are delivered via callbacks, not accumulated in memory."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Streaming responses"}),": Signal traces are delivered via ",(0,t.jsx)(n.code,{children:"onResponse"})," callbacks, not buffered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Context on-demand"}),": Context stores are created only when needed via ",(0,t.jsx)(n.code,{children:"withCtx()"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No global state"}),": Each stimulation starts with a clean slate; no ambient listeners."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-characteristics",children:"Performance characteristics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sync-first"}),": Synchronous neuron chains execute in a single tick without extra Promise overhead."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Minimal async overhead"}),": Async responses only schedule a microtask; not inherently slower. Promises are created only when a neuron returns an async result."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stack-safe"}),": Deep chains are handled via an internal queue, avoiding stack overflow."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bounded execution"}),": ",(0,t.jsx)(n.code,{children:"maxNeuronHops"})," prevents runaway processing in cyclic graphs."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,t.jsx)(n.h3,{id:"keep-context-data-minimal",children:"Keep context data minimal"}),"\n",(0,t.jsx)(n.p,{children:"Store only essential data (IDs, counters, flags) in context. Avoid large objects or full entities."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// \u2705 Good: minimal context\nctx.set({ userId: '123', attempt: 2 });\n\n// \u274c Bad: bloated context\nctx.set({ user: fullUserObject, history: lotsOfData });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"use-synchronous-responses-when-possible",children:"Use synchronous responses when possible"}),"\n",(0,t.jsx)(n.p,{children:"If a neuron doesn't perform I/O, return the next signal synchronously:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// \u2705 Sync response (fast)\n.dendrite({\n  collateral: input,\n  response: (p, axon) => axon.output.createSignal({ value: p.value * 2 })\n});\n\n// \u26a0\ufe0f Async response (schedules a microtask; use when doing I/O)\n.dendrite({\n  collateral: input,\n  response: async (p, axon) => {\n    const result = await fetch('/api');\n    return axon.output.createSignal(result);\n  }\n});\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"set-reasonable-maxneuronhops",children:["Set reasonable ",(0,t.jsx)(n.code,{children:"maxNeuronHops"})]}),"\n",(0,t.jsx)(n.p,{children:"Default: undefined (disabled). If you need a safety cap for cyclic graphs, set a lower limit:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await cns.stimulate(signal, {\n  maxNeuronHops: 10 // stop after 10 hops (optional, disabled by default)\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"implement-proper-error-handling",children:"Implement proper error handling"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"onResponse"})," to log errors without blocking the flow:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await cns.stimulate(signal, {\n  onResponse: (r) => {\n    if (r.error) logger.error(r.error);\n    if (r.queueLength === 0) logger.info('done');\n  }\n});\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"avoid-autocleanupcontexts-in-production",children:["Avoid ",(0,t.jsx)(n.code,{children:"autoCleanupContexts"})," in production"]}),"\n",(0,t.jsxs)(n.p,{children:["The CNS ",(0,t.jsx)(n.code,{children:"autoCleanupContexts"})," option adds significant overhead:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"O(V\xb2) initialization cost"}),": building SCC (Strongly Connected Components) structures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"O(1 + A) runtime cost"})," per cleanup check (where A = number of SCC ancestors)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory overhead"})," for storing SCC graphs and ancestor relationships"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Use only when:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Memory leaks are a critical issue"}),"\n",(0,t.jsx)(n.li,{children:"You have a small to medium-sized neuron graph (< 1000 neurons)"}),"\n",(0,t.jsx)(n.li,{children:"Performance is less critical than memory management"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"For production systems"}),", prefer manual context cleanup or custom cleanup strategies."]}),"\n",(0,t.jsx)(n.h2,{id:"measuring-performance",children:"Measuring performance"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"onResponse"})," to track signal flow timing:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const start = Date.now();\nawait cns.stimulate(signal, {\n  onResponse: (r) => {\n    if (r.queueLength === 0) {\n      console.log(`Completed in ${Date.now() - start}ms, ${r.hops} hops`);\n    }\n  }\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or integrate with your APM/tracing tool (e.g., OpenTelemetry):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"await cns.stimulate(signal, {\n  onResponse: (r) => {\n    span.addEvent('neuron', { collateral: r.outputSignal?.collateralName });\n    if (r.error) span.recordException(r.error);\n  }\n});\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);