"use strict";(self.webpackChunkcnstra_docs=self.webpackChunkcnstra_docs||[]).push([[314],{5438:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"recipes/self-loop-cycles","title":"Cycles with Self-loops","description":"Use self-loops to model cycles/iterations inside a single neuron while keeping ownership and state in context.","source":"@site/recipes/self-loop-cycles.md","sourceDirName":"recipes","slug":"/recipes/self-loop-cycles","permalink":"/docs/recipes/self-loop-cycles","draft":false,"unlisted":false,"editUrl":"https://github.com/abaikov/cnstra/edit/master/docs/recipes/self-loop-cycles.md","tags":[],"version":"current","lastUpdatedAt":1759800880000,"frontMatter":{"id":"self-loop-cycles","title":"Cycles with Self-loops","sidebar_label":"Self-loops","slug":"/recipes/self-loop-cycles"},"sidebar":"docs","previous":{"title":"Saga","permalink":"/docs/recipes/saga"},"next":{"title":"Swift SDK","permalink":"/docs/ecosystem/swift"}}');var o=t(4848),r=t(8453);const c={id:"self-loop-cycles",title:"Cycles with Self-loops",sidebar_label:"Self-loops",slug:"/recipes/self-loop-cycles"},l=void 0,i={},a=[];function p(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Use self-loops to model cycles/iterations inside a single neuron while keeping ownership and state in context."}),"\n",(0,o.jsx)(n.p,{children:"Why self-loops"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Deterministic: one place owns the loop logic, no hidden cross-neuron chatter"}),"\n",(0,o.jsxs)(n.li,{children:["Local state: ",(0,o.jsx)(n.code,{children:"ctx"})," carries counters/cursors/accumulators"]}),"\n",(0,o.jsx)(n.li,{children:"Ownership: the neuron emits only its own input collateral to continue"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Counter example (iterate until max)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { withCtx, collateral } from '@cnstra/core';\n\nconst step = collateral<{ amount: number }>('counter:step');\nconst done = collateral<{ total: number }>('counter:done');\n\nexport const counter = withCtx<{ total: number; attempt: number }>()\n  .neuron('counter', { step, done })\n  .dendrite({\n    collateral: step,\n    response: (payload, axon, ctx) => {\n      const prev = ctx.get() ?? { total: 0, attempt: 0 };\n      const next = { total: prev.total + payload.amount, attempt: prev.attempt + 1 };\n      ctx.set(next);\n\n      if (next.attempt < 5) {\n        // self-loop: continue the cycle\n        return axon.step.createSignal({ amount: payload.amount });\n      }\n      return axon.done.createSignal({ total: next.total });\n    },\n  });\n"})}),"\n",(0,o.jsx)(n.p,{children:"Pagination example (loop until no next page)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { withCtx, collateral } from '@cnstra/core';\n\nconst tryPage = collateral<{ cursor?: string }>('pager:try');\nconst finished = collateral<{ items: unknown[] }>('pager:finished');\n\nasync function fetchPage(cursor?: string): Promise<{ items: unknown[]; next?: string }> {\n  // replace with real API call\n  return { items: [{ id: cursor ?? '0' }], next: cursor ? undefined : '1' };\n}\n\nexport const pager = withCtx<{ cursor?: string; items: unknown[] }>()\n  .neuron('pager', { tryPage, finished })\n  .dendrite({\n    collateral: tryPage,\n    response: async (payload, axon, ctx) => {\n      if (ctx.abortSignal?.aborted) return; // cooperative cancel\n\n      const { items, next } = await fetchPage(payload.cursor ?? ctx.get()?.cursor);\n      const prev = ctx.get() ?? { items: [] as unknown[], cursor: undefined as string | undefined };\n      ctx.set({ items: [...prev.items, ...items], cursor: next });\n\n      if (next) {\n        return axon.tryPage.createSignal({ cursor: next }); // self-loop until no next\n      }\n      return axon.finished.createSignal({ items: ctx.get()!.items });\n    },\n  });\n"})}),"\n",(0,o.jsx)(n.p,{children:"Tips"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Store only what you need in ",(0,o.jsx)(n.code,{children:"ctx"})," (counters, cursors, accumulators)"]}),"\n",(0,o.jsxs)(n.li,{children:["Check ",(0,o.jsx)(n.code,{children:"ctx.abortSignal"})," between iterations"]}),"\n",(0,o.jsx)(n.li,{children:"For retries, prefer a separate self-loop neuron with backoff per attempt"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var s=t(6540);const o={},r=s.createContext(o);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);