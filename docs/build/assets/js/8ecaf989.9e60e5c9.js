"use strict";(self.webpackChunkcnstra_docs=self.webpackChunkcnstra_docs||[]).push([[692],{7843:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"recipes/response-listeners","title":"Response Listeners: Logging, Metrics, and Tracing","description":"Learn how to observe every step of a stimulation using per-run onResponse and global addResponseListener for logging, metrics, and tracing.","source":"@site/recipes/response-listeners.md","sourceDirName":"recipes","slug":"/recipes/response-listeners","permalink":"/docs/recipes/response-listeners","draft":false,"unlisted":false,"editUrl":"https://github.com/abaikov/cnstra/edit/master/docs/recipes/response-listeners.md","tags":[],"version":"current","lastUpdatedAt":1760139021000,"frontMatter":{"id":"response-listeners","title":"Response Listeners: Logging, Metrics, and Tracing","sidebar_label":"Response listeners","description":"Learn how to observe every step of a stimulation using per-run onResponse and global addResponseListener for logging, metrics, and tracing.","keywords":["middleware","logging","metrics","tracing","onResponse","addResponseListener","hooks","interceptors"]},"sidebar":"docs","previous":{"title":"Multiple Signals","permalink":"/docs/recipes/multiple-signals"},"next":{"title":"Retries","permalink":"/docs/recipes/retry"}}');var i=s(4848),o=s(8453);const t={id:"response-listeners",title:"Response Listeners: Logging, Metrics, and Tracing",sidebar_label:"Response listeners",description:"Learn how to observe every step of a stimulation using per-run onResponse and global addResponseListener for logging, metrics, and tracing.",keywords:["middleware","logging","metrics","tracing","onResponse","addResponseListener","hooks","interceptors"]},l=void 0,d={},a=[{value:"Per\u2011run <code>onResponse</code>",id:"perrun-onresponse",level:2},{value:"Global <code>addResponseListener</code>",id:"global-addresponselistener",level:2},{value:"What events are delivered?",id:"what-events-are-delivered",level:2},{value:"Tips",id:"tips",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"CNStra lets you observe traversal without polluting domain neurons. There are two hook points:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Per\u2011run: ",(0,i.jsx)(n.code,{children:"onResponse"})," option of ",(0,i.jsx)(n.code,{children:"cns.stimulate(...)"})]}),"\n",(0,i.jsxs)(n.li,{children:["Global: ",(0,i.jsx)(n.code,{children:"cns.addResponseListener(...)"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Both receive the same response object with ",(0,i.jsx)(n.code,{children:"inputSignal"}),", ",(0,i.jsx)(n.code,{children:"outputSignal"}),", ",(0,i.jsx)(n.code,{children:"error"}),", ",(0,i.jsx)(n.code,{children:"ctx"}),", and ",(0,i.jsx)(n.code,{children:"queueLength"}),"."]}),"\n",(0,i.jsxs)(n.h2,{id:"perrun-onresponse",children:["Per\u2011run ",(0,i.jsx)(n.code,{children:"onResponse"})]}),"\n",(0,i.jsx)(n.p,{children:"Use for ad\u2011hoc debugging or request\u2011scoped tracing."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"await cns.stimulate(start.createSignal({ id: '123' }), {\n  onResponse: (r) => {\n    if (r.error) {\n      console.error('[run]', r.error.message);\n      return;\n    }\n    if (r.inputSignal) {\n      console.log('IN', r.inputSignal.collateralName);\n    }\n    if (r.outputSignal) {\n      console.log('OUT', r.outputSignal.collateralName);\n    }\n  },\n});\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"global-addresponselistener",children:["Global ",(0,i.jsx)(n.code,{children:"addResponseListener"})]}),"\n",(0,i.jsx)(n.p,{children:"Use for cross\u2011cutting concerns: metrics, logging, or OpenTelemetry spans."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const off = cns.addResponseListener((r) => {\n  if (r.error) {\n    metrics.increment('cnstra.error');\n    return;\n  }\n  if (r.outputSignal) {\n    tracer.add('emit', r.outputSignal.collateralName);\n  }\n});\n\n// later, to remove the listener\noff();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"what-events-are-delivered",children:"What events are delivered?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"inputSignal"}),": when a signal enters the run (including the initial one)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"outputSignal"}),": when a dendrite returns a continuation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"}),": when a dendrite throws"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"queueLength"}),": current internal work queue length (can be used for backpressure metrics)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep listeners lightweight; heavy work should be offloaded (e.g., buffer and batch)."}),"\n",(0,i.jsx)(n.li,{children:"Exceptions thrown in listeners are swallowed to avoid breaking the run."}),"\n",(0,i.jsxs)(n.li,{children:["Combine with ",(0,i.jsx)(n.code,{children:"allowName"}),"/",(0,i.jsx)(n.code,{children:"maxNeuronHops"})," in ",(0,i.jsx)(n.code,{children:"stimulate"})," options to constrain traversal during debugging. ",(0,i.jsx)(n.code,{children:"maxNeuronHops"})," is disabled by default."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);