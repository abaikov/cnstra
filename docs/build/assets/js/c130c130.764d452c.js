"use strict";(self.webpackChunkcnstra_docs=self.webpackChunkcnstra_docs||[]).push([[375],{8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(6540);const o={},r=t.createContext(o);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},9309:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"integrations/aws-sqs","title":"AWS SQS Integration","description":"Use SQS to decouple producers from CNStra workers.","source":"@site/integrations/aws-sqs.md","sourceDirName":"integrations","slug":"/integrations/aws-sqs","permalink":"/docs/integrations/aws-sqs","draft":false,"unlisted":false,"editUrl":"https://github.com/abaikov/cnstra/edit/master/docs/integrations/aws-sqs.md","tags":[],"version":"current","lastUpdatedAt":1759800880000,"frontMatter":{"id":"aws-sqs","title":"AWS SQS Integration","sidebar_label":"AWS SQS","slug":"/integrations/aws-sqs"},"sidebar":"docs","previous":{"title":"Advanced","permalink":"/docs/devtools/advanced"},"next":{"title":"BullMQ","permalink":"/docs/integrations/bullmq"}}');var o=s(4848),r=s(8453);const a={id:"aws-sqs",title:"AWS SQS Integration",sidebar_label:"AWS SQS",slug:"/integrations/aws-sqs"},i=void 0,c={},l=[];function d(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Use SQS to decouple producers from CNStra workers."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { SQSClient, ReceiveMessageCommand, DeleteMessageCommand } from '@aws-sdk/client-sqs';\nimport { CNS } from '@cnstra/core';\n\nconst sqs = new SQSClient({});\nconst cns = new CNS();\nconst queueUrl = process.env.QUEUE_URL!;\n\nasync function poll() {\n  const { Messages } = await sqs.send(new ReceiveMessageCommand({\n    QueueUrl: queueUrl,\n    MaxNumberOfMessages: 10,\n    WaitTimeSeconds: 20,\n  }));\n\n  for (const m of Messages ?? []) {\n    const payload = JSON.parse(m.Body ?? 'null');\n    await cns.stimulate(myCollateral.createSignal(payload));\n    await sqs.send(new DeleteMessageCommand({ QueueUrl: queueUrl, ReceiptHandle: m.ReceiptHandle! }));\n  }\n\n  setImmediate(poll);\n}\n\npoll();\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Prefer long polling with ",(0,o.jsx)(n.code,{children:"WaitTimeSeconds"})]}),"\n",(0,o.jsx)(n.li,{children:"Control concurrency with a worker pool or CNStra queues"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);