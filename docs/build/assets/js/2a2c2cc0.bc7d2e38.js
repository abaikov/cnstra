"use strict";(self.webpackChunkcnstra_docs=self.webpackChunkcnstra_docs||[]).push([[777],{5223:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"recipes/retry","title":"Retries","description":"Implement retries by looping within the same neuron, storing attempt count in context, and backing off between tries. This preserves signal ownership and keeps orchestration local.","source":"@site/recipes/retry.md","sourceDirName":"recipes","slug":"/recipes/retry","permalink":"/docs/recipes/retry","draft":false,"unlisted":false,"editUrl":"https://github.com/abaikov/cnstra/edit/master/docs/recipes/retry.md","tags":[],"version":"current","lastUpdatedAt":1759800880000,"frontMatter":{"id":"retry","title":"Retries","sidebar_label":"Retries","slug":"/recipes/retry"},"sidebar":"docs","previous":{"title":"Response listeners","permalink":"/docs/recipes/response-listeners"},"next":{"title":"Saga","permalink":"/docs/recipes/saga"}}');var s=r(4848),o=r(8453);const i={id:"retry",title:"Retries",sidebar_label:"Retries",slug:"/recipes/retry"},a=void 0,c={},l=[];function p(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Implement retries by looping within the same neuron, storing attempt count in context, and backing off between tries. This preserves signal ownership and keeps orchestration local."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import { withCtx, collateral } from '@cnstra/core';\n\n// Collaterals owned by the retry neuron\nconst tryFetch = collateral<{ url: string }>('retry:tryFetch');\nconst completed = collateral<{ ok: true; data: unknown }>('retry:completed');\nconst failed = collateral<{ ok: false; error: unknown }>('retry:failed');\n\nconst sleep = (ms: number) => new Promise(r => setTimeout(r, ms));\n\nexport const fetchWithRetry = withCtx<{ attempt?: number }>()\n  .neuron('fetch-with-retry', { tryFetch, completed, failed })\n  .dendrite({\n    collateral: tryFetch,\n    response: async (payload, axon, ctx) => {\n      const attempt = (ctx.get()?.attempt ?? 0) + 1;\n      ctx.set({ attempt });\n\n      try {\n        const res = await fetch(payload.url);\n        if (!res.ok) throw new Error(`HTTP ${res.status}`);\n        const data = await res.json();\n        return axon.completed.createSignal({ ok: true, data });\n      } catch (error) {\n        if (attempt < 3) {\n          await sleep(2 ** (attempt - 1) * 250); // backoff: 250ms, 500ms, ...\n          // self-loop: re-emit our own input collateral\n          return axon.tryFetch.createSignal({ url: payload.url });\n        }\n        return axon.failed.createSignal({ ok: false, error });\n      }\n    },\n  });\n"})}),"\n",(0,s.jsx)(t.p,{children:"Notes"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Self-loop uses the neuron's own input collateral (",(0,s.jsx)(t.code,{children:"retry:tryFetch"}),"), complying with ownership."]}),"\n",(0,s.jsxs)(t.li,{children:["Attempt count is stored in ",(0,s.jsx)(t.code,{children:"ctx"}),"; backoff grows per attempt."]}),"\n",(0,s.jsx)(t.li,{children:"Prefer queue-native retries (e.g., BullMQ, SQS) in production for visibility; use local retries for transient client/network work."}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var n=r(6540);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);