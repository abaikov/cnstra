"use strict";(self.webpackChunkcnstra_docs=self.webpackChunkcnstra_docs||[]).push([[536],{805:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"concepts/ierg","title":"IERG - Inverted Explicit Reactive Graph Architecture","description":"Learn about IERG (Inverted Explicit Reactive Graph), CNStra\'s architectural approach. Understand deterministic state machines, explicit flow control, SOLID/SRP principles, and how IERG differs from Flux, Redux, and event-driven architectures.","source":"@site/concepts/ierg.md","sourceDirName":"concepts","slug":"/concepts/ierg","permalink":"/docs/concepts/ierg","draft":false,"unlisted":false,"editUrl":"https://github.com/abaikov/cnstra/edit/master/docs/concepts/ierg.md","tags":[],"version":"current","lastUpdatedAt":1760122051000,"frontMatter":{"id":"ierg","title":"IERG - Inverted Explicit Reactive Graph Architecture","sidebar_label":"IERG","slug":"/concepts/ierg","description":"Learn about IERG (Inverted Explicit Reactive Graph), CNStra\'s architectural approach. Understand deterministic state machines, explicit flow control, SOLID/SRP principles, and how IERG differs from Flux, Redux, and event-driven architectures.","keywords":["IERG","inverted explicit reactive graph","architecture","design pattern","state machine architecture","explicit flow control","deterministic orchestration","SOLID principles","SRP","single responsibility","Redux comparison","Flux comparison","event-driven vs explicit","saga pattern","state machine pattern","graph-based architecture"]},"sidebar":"docs","previous":{"title":"Stimulation Options","permalink":"/docs/core/stimulation-options"},"next":{"title":"Introduction","permalink":"/docs/concepts/intro"}}');var r=i(4848),s=i(8453);const a={id:"ierg",title:"IERG - Inverted Explicit Reactive Graph Architecture",sidebar_label:"IERG",slug:"/concepts/ierg",description:"Learn about IERG (Inverted Explicit Reactive Graph), CNStra's architectural approach. Understand deterministic state machines, explicit flow control, SOLID/SRP principles, and how IERG differs from Flux, Redux, and event-driven architectures.",keywords:["IERG","inverted explicit reactive graph","architecture","design pattern","state machine architecture","explicit flow control","deterministic orchestration","SOLID principles","SRP","single responsibility","Redux comparison","Flux comparison","event-driven vs explicit","saga pattern","state machine pattern","graph-based architecture"]},l=void 0,c={},o=[{value:"Flow: short\u2011lived vs long\u2011lived sagas",id:"flow-shortlived-vs-longlived-sagas",level:2},{value:"Neuron as a state machine",id:"neuron-as-a-state-machine",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"IERG stands for Inverted Explicit Reactive Graph. It\u2019s the core execution model of CNStra."}),"\n",(0,r.jsx)(n.p,{children:"What it is"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inverted: you explicitly start a run (stimulate), CNS walks the graph. Nothing happens in the background until you ask for it."}),"\n",(0,r.jsx)(n.li,{children:"Explicit: every continuation is returned explicitly from a dendrite. No ambient listeners, no hidden subscriptions."}),"\n",(0,r.jsx)(n.li,{children:"Reactive Graph: typed collaterals connect neurons; responses form a deterministic traversal."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Not an event bus"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No global \u201cemit\u201d. A neuron may only emit collaterals declared in its own axon (signal ownership)."}),"\n",(0,r.jsx)(n.li,{children:"You don\u2019t need unique event IDs to ensure \u201cthe event is mine\u201d \u2014 you bind to exact collaterals, not stringly-named topics floating around."}),"\n",(0,r.jsx)(n.li,{children:"No race for who hears what; the next step is whatever you return."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"SRP and architecture clarity"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Actors are visible: controller neurons orchestrate; domain neurons do one thing well."}),"\n",(0,r.jsx)(n.li,{children:"Single Responsibility Principle is easier to uphold: each neuron handles exactly one input collateral and returns exactly one continuation (or none)."}),"\n",(0,r.jsx)(n.li,{children:"Ownership is clear: producers emit their own collaterals; consumers bind via dendrites."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Determinism and debuggability"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runs are hop-bounded and deterministic; the same input gives the same path."}),"\n",(0,r.jsx)(n.li,{children:"Traces are easy to follow: collateral \u2192 dendrite \u2192 returned signal, step by step."}),"\n",(0,r.jsx)(n.li,{children:"No \u201cwho subscribed where?\u201d scavenger hunts; flows are local and type-checked."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"No unique event IDs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Because routing is explicit, you don\u2019t need ad\u2011hoc event IDs to filter \u201cyour\u201d messages."}),"\n",(0,r.jsx)(n.li,{children:"The binding is structural (collateral types), not heuristic (string/topic + ID dance)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Testing and refactoring"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Neurons are small pure(ish) functions with typed IO \u2192 unit testing is trivial."}),"\n",(0,r.jsx)(n.li,{children:"Changing a collateral signature propagates via types; broken bindings fail fast at compile time."}),"\n",(0,r.jsx)(n.li,{children:"Controller neurons allow refactoring of orchestration without touching domain logic."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Performance and backpressure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No full state tree copies; responses are local and O(1) dispatch along the graph."}),"\n",(0,r.jsx)(n.li,{children:"Built-in concurrency gates and AbortSignal support provide backpressure knobs."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Entry point and cross\u2011cutting concerns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Single entry point: ",(0,r.jsx)(n.code,{children:"cns.stimulate(...)"})," starts every run."]}),"\n",(0,r.jsxs)(n.li,{children:["Cross\u2011cutting hooks: use global ",(0,r.jsx)(n.code,{children:"addResponseListener(...)"})," or per\u2011run ",(0,r.jsx)(n.code,{children:"onResponse"})," to implement logging/metrics/tracing without polluting domain neurons."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Comparison to Flux/Redux"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Flux relies on global dispatch and slice reducers; cross-slice coordination and ordering are awkward."}),"\n",(0,r.jsx)(n.li,{children:"Immutable tree copies cause extra allocations and render churn."}),"\n",(0,r.jsx)(n.li,{children:"IERG replaces this with explicit sequencing and local continuation, keeping state changes minimal and predictable."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Tiny example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { CNS, collateral, neuron, withCtx } from '@cnstra/core';\n\nconst start = collateral<{ q: string }>('search:start');\nconst fetched = collateral<{ q: string; items: any[] }>('search:fetched');\n\nconst controller = withCtx<{ q?: string }>()\n  .neuron('controller', { fetched })\n  .dendrite({\n    collateral: start,\n    response: async (payload, axon, ctx) => {\n      ctx.set({ q: payload.q });\n      const items = await api.search(payload.q);\n      return axon.fetched.createSignal({ q: payload.q, items });\n    },\n  });\n\nconst render = neuron('render', {}).dendrite({\n  collateral: fetched,\n  response: ({ items }) => { view.render(items); },\n});\n\nnew CNS([controller, render]);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Key takeaways"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Start runs explicitly; return next steps explicitly."}),"\n",(0,r.jsx)(n.li,{children:"Bind to collaterals, not topic strings; no unique event IDs needed."}),"\n",(0,r.jsx)(n.li,{children:"Keep orchestration in controllers, domain work in domain neurons."}),"\n",(0,r.jsx)(n.li,{children:"Deterministic, testable, type-safe, and fast."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"flow-shortlived-vs-longlived-sagas",children:"Flow: short\u2011lived vs long\u2011lived sagas"}),"\n",(0,r.jsx)(n.p,{children:"Short\u2011lived (single stimulation)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["One explicit ",(0,r.jsx)(n.code,{children:"stimulate(...)"})," triggers a complete deterministic run."]}),"\n",(0,r.jsx)(n.li,{children:"Ideal for user actions and bounded workflows (validate \u2192 fetch \u2192 render)."}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"AbortSignal"})," for graceful cancel; use ",(0,r.jsx)(n.code,{children:"ctx"})," for per\u2011run data."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Long\u2011lived (multi\u2011stimulation)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A saga that spans time is implemented by re\u2011stimulating on external events (queues, cron, webhooks, timers)."}),"\n",(0,r.jsx)(n.li,{children:"Keep a correlation id in payload/context; persist progress in OIMDB or a DB."}),"\n",(0,r.jsxs)(n.li,{children:["No global listeners: the \u201ccontinuation\u201d is a new explicit ",(0,r.jsx)(n.code,{children:"stimulate(...)"})," when the event arrives."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example (long\u2011lived via queue)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// When a message arrives later, explicitly continue the saga\nqueue.on('message', async (m) => {\n  await cns.stimulate(orderPaymentReceived.createSignal({ orderId: m.id }));\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"This keeps orchestration explicit and observable, without hidden subscriptions."}),"\n",(0,r.jsx)(n.h2,{id:"neuron-as-a-state-machine",children:"Neuron as a state machine"}),"\n",(0,r.jsx)(n.p,{children:"A neuron can be viewed as a small state machine:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inputs (dendrites) are state triggers."}),"\n",(0,r.jsx)(n.li,{children:"Returned signals are transitions (next states on the axon)."}),"\n",(0,r.jsx)(n.li,{children:"The neuron owns its transitions: it emits only its own axon collaterals."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const order = {\n  reserved: collateral<{ id: string }>('order:reserved'),\n  charged: collateral<{ id: string }>('order:charged'),\n  failed: collateral<{ id: string; reason: string }>('order:failed'),\n};\n\nconst payment = neuron('payment', order)\n  .dendrite({\n    collateral: order.reserved,\n    response: async (p, axon) => {\n      const ok = await payments.charge(p.id);\n      return ok\n        ? axon.charged.createSignal({ id: p.id })\n        : axon.failed.createSignal({ id: p.id, reason: 'card_declined' });\n    },\n  });\n"})}),"\n",(0,r.jsx)(n.p,{children:"At graph level, composing such neurons yields a larger, explicit state machine with deterministic transitions between collaterals."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);