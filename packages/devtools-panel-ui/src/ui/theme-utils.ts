/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–æ–π "–ì–Ω–∏—é—â–∞—è –ø–ª–æ—Ç—å"
 */

// –¢–∏–ø—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º
export type DecayColor =
    | 'flesh-dark'
    | 'flesh-medium'
    | 'flesh-light'
    | 'flesh-infected'
    | 'blood-dark'
    | 'blood-medium'
    | 'blood-bright'
    | 'pus-yellow'
    | 'pus-green'
    | 'bone-dark'
    | 'bone-medium'
    | 'bone-light'
    | 'bone-white'
    | 'infection-red'
    | 'infection-green'
    | 'infection-purple'
    | 'infection-yellow';

export type DecayTextColor =
    | 'text-primary'
    | 'text-secondary'
    | 'text-muted'
    | 'text-accent'
    | 'text-success'
    | 'text-warning'
    | 'text-error';

export type DecayBgColor =
    | 'bg-primary'
    | 'bg-secondary'
    | 'bg-tertiary'
    | 'bg-panel'
    | 'bg-card';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
export const getDecayColor = (color: DecayColor): string => `var(--${color})`;
export const getTextColor = (color: DecayTextColor): string =>
    `var(--${color})`;
export const getBgColor = (color: DecayBgColor): string => `var(--${color})`;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π —Å —Ç–µ–º–æ–π
export const createDecayStyle = (styles: Record<string, string | number>) => {
    return Object.entries(styles).reduce((acc, [key, value]) => {
        if (typeof value === 'string' && value.startsWith('decay-')) {
            const colorKey = value.replace('decay-', '') as DecayColor;
            acc[key] = getDecayColor(colorKey);
        } else if (typeof value === 'string' && value.startsWith('text-')) {
            const colorKey = value as DecayTextColor;
            acc[key] = getTextColor(colorKey);
        } else if (typeof value === 'string' && value.startsWith('bg-')) {
            const colorKey = value as DecayBgColor;
            acc[key] = getBgColor(colorKey);
        } else {
            acc[key] = value;
        }
        return acc;
    }, {} as Record<string, string | number>);
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
export const DECAY_ICONS = {
    skull: 'üíÄ',
    zombie: 'üßü',
    virus: 'ü¶†',
    biohazard: '‚ò£Ô∏è',
    syringe: 'üíâ',
    pill: 'üíä',
    dna: 'üß¨',
    microbe: 'ü¶†',
    crossBones: '‚ò†Ô∏è',
    ghost: 'üëª',
    spider: 'üï∑Ô∏è',
    bat: 'ü¶á',
    rat: 'üêÄ',
    snake: 'üêç',
    scorpion: 'ü¶Ç',
    warning: '‚ö†Ô∏è',
    radiation: '‚ò¢Ô∏è',
    fire: 'üî•',
    explosion: 'üí•',
    lightning: '‚ö°',
    blood: 'ü©∏',
    bone: 'ü¶¥',
    brain: 'üß†',
    heart: '‚ù§Ô∏è',
    lungs: 'ü´Å',
    eye: 'üëÅÔ∏è',
    tooth: 'ü¶∑',
    claw: 'ü™ù',
    chainsaw: 'ü™ö',
    axe: 'ü™ì',
    knife: 'üî™',
    sickle: '‚öîÔ∏è',
    shield: 'üõ°Ô∏è',
    potion: 'üß™',
    flask: 'üß™',
    test_tube: 'üß™',
    microscope: 'üî¨',
    petri_dish: 'üß´',
    bandage: 'ü©π',
    thermometer: 'üå°Ô∏è',
    stethoscope: 'ü©∫',
    pill_bottle: 'üíä',
    injection: 'üíâ',
    x_ray: 'ü©ª',
    hospital: 'üè•',
    ambulance: 'üöë',
    coffin: '‚ö∞Ô∏è',
    grave: 'ü™¶',
    church: '‚õ™',
    castle: 'üè∞',
    tower: 'üóº',
    bridge: 'üåâ',
    tunnel: 'üï≥Ô∏è',
    cave: 'üï≥Ô∏è',
    volcano: 'üåã',
    desert: 'üèúÔ∏è',
    swamp: 'üèûÔ∏è',
    forest: 'üå≤',
    tree_dead: 'üå≥',
    mushroom: 'üçÑ',
    web: 'üï∏Ô∏è',
    cocoon: 'üõ°Ô∏è',
    egg: 'ü•ö',
    larva: 'üêõ',
    worm: 'ü™±',
    maggot: 'üêõ',
    fly: 'ü™∞',
    mosquito: 'ü¶ü',
    tick: 'üï∑Ô∏è',
    leech: 'ü™±',
    slug: 'üêå',
    snail: 'üêå',
} as const;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
export const createFlickerAnimation = (duration = '2s') => ({
    animation: `flicker ${duration} infinite`,
});

export const createPulseInfectionAnimation = (duration = '1.5s') => ({
    animation: `pulse-infection ${duration} infinite`,
});

export const createDecayGlowAnimation = (duration = '3s') => ({
    animation: `decay-glow ${duration} infinite`,
});

export const createGlitchAnimation = (duration = '2s') => ({
    animation: `glitch ${duration} infinite`,
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–µ–π
export const createDecayShadow = (
    type: 'dark' | 'blood' | 'infection' | 'bone' = 'dark'
) => {
    const shadows = {
        dark: 'var(--shadow-dark)',
        blood: 'var(--shadow-blood)',
        infection: 'var(--shadow-infection)',
        bone: 'var(--shadow-bone)',
    };
    return `0 2px 4px ${shadows[type]}`;
};

export const createGlowEffect = (
    color: DecayColor,
    intensity: 'low' | 'medium' | 'high' = 'medium'
) => {
    const intensities = {
        low: '3px',
        medium: '5px',
        high: '8px',
    };
    return `0 0 ${intensities[intensity]} var(--${color})`;
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –≥–Ω–∏–µ–Ω–∏—è
export const createDecayGradient = (
    direction = '90deg',
    colors: DecayColor[]
) => {
    const colorVars = colors.map(color => `var(--${color})`).join(', ');
    return `linear-gradient(${direction}, ${colorVars})`;
};

// –ì–æ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const DECAY_COMPONENT_STYLES = {
    button: {
        background: 'var(--flesh-medium)',
        color: 'var(--text-primary)',
        border: '2px solid var(--border-infected)',
        padding: 'var(--spacing-sm) var(--spacing-md)',
        fontFamily: 'var(--font-primary)',
        fontSize: 'var(--font-size-sm)',
        cursor: 'pointer',
        transition: 'all var(--transition-fast)',
        textTransform: 'uppercase' as const,
        letterSpacing: '1px',
    },
    card: {
        background: 'var(--bg-card)',
        border: '1px solid var(--border-accent)',
        borderRadius: 'var(--radius-sm)',
        padding: 'var(--spacing-md)',
        boxShadow:
            '0 2px 4px var(--shadow-dark), inset 0 1px 0 rgba(163, 157, 150, 0.1)',
        transition: 'all var(--transition-medium)',
    },
    panel: {
        background: 'var(--bg-panel)',
        border: '2px solid var(--border-infected)',
        borderRadius: 'var(--radius-md)',
        padding: 'var(--spacing-lg)',
        boxShadow:
            'inset 0 0 10px var(--shadow-blood), 0 0 20px var(--shadow-dark)',
    },
    input: {
        background: 'var(--bg-secondary)',
        color: 'var(--text-primary)',
        border: '2px solid var(--border-primary)',
        borderRadius: 'var(--radius-sm)',
        padding: 'var(--spacing-sm)',
        fontFamily: 'var(--font-primary)',
        fontSize: 'var(--font-size-sm)',
        transition: 'all var(--transition-fast)',
    },
} as const;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
export const applyPixelPerfect = () => ({
    imageRendering: 'pixelated' as const,
    WebkitFontSmoothing: 'none' as const,
    MozOsxFontSmoothing: 'grayscale' as const,
    fontSmooth: 'never' as const,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
export const createPixelGrid = (size = 1) => ({
    backgroundImage: `
    linear-gradient(rgba(163, 157, 150, 0.1) ${size}px, transparent ${size}px),
    linear-gradient(90deg, rgba(163, 157, 150, 0.1) ${size}px, transparent ${size}px)
  `,
    backgroundSize: `${size * 8}px ${size * 8}px`,
});

export default {
    getDecayColor,
    getTextColor,
    getBgColor,
    createDecayStyle,
    DECAY_ICONS,
    createFlickerAnimation,
    createPulseInfectionAnimation,
    createDecayGlowAnimation,
    createGlitchAnimation,
    createDecayShadow,
    createGlowEffect,
    createDecayGradient,
    DECAY_COMPONENT_STYLES,
    applyPixelPerfect,
    createPixelGrid,
};
